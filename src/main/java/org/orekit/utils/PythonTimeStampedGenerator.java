/* Copyright 2002-2019 CS Systèmes d'Information
 * Licensed to CS Systèmes d'Information (CS) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * CS licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this file was created by SCC 2019 and is largely a derived work from the
// original java class/interface

package org.orekit.utils;

import org.orekit.time.AbsoluteDate;
import org.orekit.time.TimeStamped;
import org.orekit.utils.TimeStampedGenerator;

import java.util.List;

public class PythonTimeStampedGenerator<T extends TimeStamped> implements TimeStampedGenerator<T> {
    /** Part of JCC Python interface to object */
    private long pythonObject;

    /** Part of JCC Python interface to object */
    public void pythonExtension(long pythonObject)
    {
        this.pythonObject = pythonObject;
    }

    /** Part of JCC Python interface to object */
    public long pythonExtension()
    {
        return this.pythonObject;
    }

    /** Part of JCC Python interface to object */
    public void finalize()
            throws Throwable
    {
        pythonDecRef();
    }

    /** Part of JCC Python interface to object */
    public native void pythonDecRef();

    /**
     * Generate a chronologically sorted list of entries to be cached.
     * <p>
     * If {@code existingDate} is earlier than {@code date}, the range covered by
     * generated entries must cover at least from {@code existingDate} (excluded)
     * to {@code date} (included). If {@code existingDate} is later than {@code date},
     * the range covered by generated entries must cover at least from {@code date}
     * (included) to {@code existingDate} (excluded).
     * </p>
     * <p>
     * The generated entries may cover a range larger than the minimum specified above
     * if the generator prefers to generate large chunks of data at once. It may
     * generate again entries already generated by an earlier call (typically at {@code
     * existingDate}), these extra entries will be silently ignored by the cache.
     * </p>
     * <p>
     * Non-coverage of the minimum range may lead to a loss of data, as the gap will
     * not be filled by the {@link GenericTimeStampedCache} in subsequent calls.
     * </p>
     * <p>
     * The generated entries <em>must</em> be chronologically sorted.
     * </p>
     *
     * @param existingDate date of the closest already existing entry (may be null)
     * @param date         date that must be covered by the range of the generated array
     * @return chronologically sorted list of generated entries
     */
    @Override
    public native List<T> generate(AbsoluteDate existingDate, AbsoluteDate date);
}
